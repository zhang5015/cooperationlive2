<?php

/**
 * PluginCooperationArticle
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class PluginCooperationArticle extends BaseCooperationArticle
{
	public function __toString()
	{
		return sprintf('%s at %s', $this->getTitle(), $this->getAuthor());
	}

	public function asArray($host)
	{
		return array(
      'category'     => $this->getCooperationCategory()->getName(),
      'title'        => $this->getTitle(),
      'author'       => $this->getAuthor(),
      'image'        => $this->getImage() ? 'http://'.$host.'/uploads/articles/'.$this->getImage() : null,
      'body'         => $this->getBody(),
      'link'         => $this->getLink(),
      'abstract'     => $this->getAbstract(),
      'created_at'   => $this->getCreatedAt(),
      'expires_at'   => $this->getExpiresAt()
		);
	}

	public function expiresSoon()
	{
		return $this->getDaysBeforeExpires() < 5;
	}

	public function extend($force = false)
	{
		if (!$force && !$this->expiresSoon())
		{
			return false;
		}

		$this->setExpiresAt(date('Y-m-d', time() + 86400 * sfConfig::get('app_active_days')));
		$this->save();

		return true;
	}

	public function getActiveArticles()
	{
		$q = $this->createQuery('j')
		->where('j.expires_at > ?', date('Y-m-d H:i:s', time()))
		->orderBy('j.expires_at DESC');

		return $q->execute();
	}

	public function getTitleSlug()
	{
		return Cooperation::slugify($this->getTitle());
	}

	public function getDaysBeforeExpires()
	{
		return ceil(($this->getDateTimeObject('expires_at')->format('U') - time()) / 86400);
	}

	public function getAuthorSlug()
	{
		return Cooperation::slugify($this->getAuthor());
	}



	public function isExpired()
	{
		return $this->getDaysBeforeExpires() < 0;
	}

	public function publish()
	{
		$this->setIsActivated(true);
		$this->save();
	}

	public function save(Doctrine_Connection $conn = null)
	{
		if ($this->isNew() && !$this->getExpiresAt())
		{
			$this->setCreatedAt(date('Y-m-d H:i:s', time()));
			$now = $this->getCreatedAt() ? $this->getDateTimeObject('created_at')->format('U') : time();
			$this->setExpiresAt(date('Y-m-d H:i:s', $now + 86400 * sfConfig::get('app_active_days')));
		}
		$this->setUpdatedAt(date('Y-m-d H:i:s', time()));

		$conn = $conn ? $conn : $this->getTable()->getConnection();
		$conn->beginTransaction();
		try
		{
			$ret = parent::save($conn);

			$this->updateLuceneIndex();

			$conn->commit();

			return $ret;
		}
		catch (Exception $e)
		{
			$conn->rollBack();
			throw $e;
		}
	}

	public function delete(Doctrine_Connection $conn = null)
	{
		$index = CooperationArticleTable::getLuceneIndex();

		foreach ($index->find('pk:'.$this->getId()) as $hit)
		{
			$index->delete($hit->id);
		}

		return parent::delete($conn);
	}

	public function updateLuceneIndex()
	{
		$index = CooperationArticleTable::getLuceneIndex();

		// remove existing entries
		foreach ($index->find('pk:'.$this->getId()) as $hit)
		{
			$index->delete($hit->id);
		}

		// don't index expired and non-activated articles
		if ($this->isExpired() || !$this->getIsActivated())
		{
			return;
		}

		$doc = new Zend_Search_Lucene_Document();

		// store article primary key to identify it in the search results
		$doc->addField(Zend_Search_Lucene_Field::Keyword('pk', $this->getId()));

		// index article fields
		$doc->addField(Zend_Search_Lucene_Field::UnStored('title', $this->getTitle(), 'utf-8'));
		$doc->addField(Zend_Search_Lucene_Field::UnStored('author', $this->getAuthor(), 'utf-8'));
		$doc->addField(Zend_Search_Lucene_Field::UnStored('abstract', $this->getAbstract(), 'utf-8'));

		// add article to the index
		$index->addDocument($doc);
		$index->commit();
	}
}