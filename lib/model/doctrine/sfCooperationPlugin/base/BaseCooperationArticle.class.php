<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('CooperationArticle', 'doctrine');

/**
 * BaseCooperationArticle
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $category_id
 * @property string $title
 * @property string $author
 * @property string $body
 * @property string $link
 * @property string $image
 * @property string $abstract
 * @property integer $is_public
 * @property integer $is_activated
 * @property timestamp $expires_at
 * @property timestamp $created_at
 * @property timestamp $updated_at
 * @property CooperationCategory $CooperationCategory
 * 
 * @method integer             getId()                  Returns the current record's "id" value
 * @method integer             getCategoryId()          Returns the current record's "category_id" value
 * @method string              getTitle()               Returns the current record's "title" value
 * @method string              getAuthor()              Returns the current record's "author" value
 * @method string              getBody()                Returns the current record's "body" value
 * @method string              getLink()                Returns the current record's "link" value
 * @method string              getImage()               Returns the current record's "image" value
 * @method string              getAbstract()            Returns the current record's "abstract" value
 * @method integer             getIsPublic()            Returns the current record's "is_public" value
 * @method integer             getIsActivated()         Returns the current record's "is_activated" value
 * @method timestamp           getExpiresAt()           Returns the current record's "expires_at" value
 * @method timestamp           getCreatedAt()           Returns the current record's "created_at" value
 * @method timestamp           getUpdatedAt()           Returns the current record's "updated_at" value
 * @method CooperationCategory getCooperationCategory() Returns the current record's "CooperationCategory" value
 * @method CooperationArticle  setId()                  Sets the current record's "id" value
 * @method CooperationArticle  setCategoryId()          Sets the current record's "category_id" value
 * @method CooperationArticle  setTitle()               Sets the current record's "title" value
 * @method CooperationArticle  setAuthor()              Sets the current record's "author" value
 * @method CooperationArticle  setBody()                Sets the current record's "body" value
 * @method CooperationArticle  setLink()                Sets the current record's "link" value
 * @method CooperationArticle  setImage()               Sets the current record's "image" value
 * @method CooperationArticle  setAbstract()            Sets the current record's "abstract" value
 * @method CooperationArticle  setIsPublic()            Sets the current record's "is_public" value
 * @method CooperationArticle  setIsActivated()         Sets the current record's "is_activated" value
 * @method CooperationArticle  setExpiresAt()           Sets the current record's "expires_at" value
 * @method CooperationArticle  setCreatedAt()           Sets the current record's "created_at" value
 * @method CooperationArticle  setUpdatedAt()           Sets the current record's "updated_at" value
 * @method CooperationArticle  setCooperationCategory() Sets the current record's "CooperationCategory" value
 * 
 * @package    cooperation
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseCooperationArticle extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('cooperation_article');
        $this->hasColumn('id', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 8,
             ));
        $this->hasColumn('category_id', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 8,
             ));
        $this->hasColumn('title', 'string', 50, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 50,
             ));
        $this->hasColumn('author', 'string', 50, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 50,
             ));
        $this->hasColumn('body', 'string', 65535, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 65535,
             ));
        $this->hasColumn('link', 'string', 50, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 50,
             ));
        $this->hasColumn('image', 'string', 50, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 50,
             ));
        $this->hasColumn('abstract', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('is_public', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '1',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('is_activated', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('expires_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('created_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('updated_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('CooperationCategory', array(
             'local' => 'category_id',
             'foreign' => 'id'));
    }
}